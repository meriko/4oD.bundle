from decode import Decode

BASE_URL  = 'http://m.channel4.com'
ASSET_URL = 'http://ais.channel4.com/asset/'

####################################################################################################
def MetadataObjectForURL(url):
    pageElement = HTML.ElementFromURL(url)
    
    for item in pageElement.xpath("//section[@id='episodeDetail']//article"):            
        try:
            show = item.xpath("./@data-wsbrandtitle")[0].replace("-", " ")[1:].title()
        except:
            show = None
        
        title = item.xpath(".//div[@class='details episodePage']//p/text()")[0].strip()   
        thumb = item.xpath(".//img/@src")[0]
                
        lines = ''.join(item.xpath(".//div[@class='details episodePage']//p/text()")).strip()
        
        summary = ''
        for line in lines.splitlines():
            if not line.isspace():
                summary = summary + line.strip() + '\r\n'
        
        try:
            synopsis = item.xpath(".//div[@class='synopsis']//p/text()")[0].strip()
        except:
            synopsis = ''
            
        summary = synopsis + '\r\n\r\n' + summary
        
        try:
            episode = int(RE_EPISODE_DETAILS.search(summary).groups()[0])
        except:
            try:
                episode = int(RE_EPISODE_DETAILS.search(item.xpath(".//img/@src")[0]).groups()[0])
            except:
                episode = None
            
        try:
            season = int(RE_SERIES_DETAILS.search(summary).groups()[0])
        except:
            season = None
            
        try:
            duration = int(RE_DURATION_DETAILS.search(summary).groups()[0]) * 60 * 1000
        except:
            duration = None
    
        return EpisodeObject(
                url = url,
                title = title,
                thumb = thumb,
                show = show,
                season = season,
                index = episode,
                summary = summary,
                duration = duration
        )

####################################################################################################
def MediaObjectsForURL(url):
    # Determine id of episode
    try:
        id = url[url.rfind("/") + 1:]
    except:
        raise Ex.MediaNotAvailable

    return [
        MediaObject(
            protocol = 'rtmp',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            video_resolution = 288,
            audio_channels = 2,
            parts = [
                PartObject(
                    key = Callback(PlayVideo, id = id) 
                )
            ],
            optimized_for_streaming = True
        )
    ]

####################################################################################################
@indirect
def PlayVideo(id):
    try:
        xmlElement = XML.ElementFromURL(ASSET_URL + id)
    except:
        raise Ex.MediaGeoblocked
    
    token = Decode(xmlElement.xpath("//token/text()")[0])            
    cdn   = xmlElement.xpath("//cdn/text()")[0]
    
    streamURI = xmlElement.xpath("//streamUri/text()")[0]
    url       = Regex('(.*?)mp4:').search(streamURI).group(1)

    try:
        clip = xmlElement.xpath("//location/text()")[0]
        
        if not clip.startswith("mp4:"):
            clip = "mp4:" + clip
    except:
        clip = Regex('(mp4:.*)').search(streamURI).group(1)

    if cdn == 'll':
        e = xmlElement.xpath("//e/text()")[0]
        
        try:
            ip = xmlElement.xpath("//ip/text()")[0]
            auth = "e=%s&ip=%s&h=%s" % (e, ip, token)
        except:
            auth = "e=%s&h=%s" % (e, token)
            
        clip = clip + "?" + auth
       
    else:
        fingerprint = xmlElement.xpath("//fingerprint/text()")[0]
        slist       = xmlElement.xpath("//slist/text()")[0]
        
        auth = "auth=%s&aifp=%s&slist=%s" % (token, fingerprint, slist)
        
    app = Regex('.com/(.*?)mp4:').search(streamURI).group(1) + "?ovpfv=1.1&" + auth
    
    try:
        content = HTTP.Request('http://m.channel4.com/js/script.js', cacheTime = CACHE_1DAY).content
        swf_url = BASE_URL + Regex('swfPath *= * "(\/swf\/mobileplayer.*)";').search(content).groups()[0]
    except:
        swf_url = BASE_URL + '/swf/mobileplayer-10.2.0-1.43.swf'
        
    return IndirectResponse(
                VideoClipObject, 
                key = RTMPVideoURL(
                        url = url, 
                        clip = clip, 
                        app = app, 
                        swf_url = swf_url
                )
    )
 